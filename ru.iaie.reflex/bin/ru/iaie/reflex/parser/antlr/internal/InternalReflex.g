/*
 * generated by Xtext 2.20.0
 */
grammar InternalReflex;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ru.iaie.reflex.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ru.iaie.reflex.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ru.iaie.reflex.services.ReflexGrammarAccess;

}

@parser::members {

 	private ReflexGrammarAccess grammarAccess;

    public InternalReflexParser(TokenStream input, ReflexGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ReflexGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_ticks_3_0=RULE_TACT
				{
					newLeafNode(lv_ticks_3_0, grammarAccess.getProgramAccess().getTicksTACTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"ticks",
						true,
						"ru.iaie.reflex.Reflex.TACT");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getConstsConstParserRuleCall_4_0_0());
					}
					lv_consts_4_0=ruleConst
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"consts",
							lv_consts_4_0,
							"ru.iaie.reflex.Reflex.Const");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getEnumsEnumParserRuleCall_4_1_0());
					}
					lv_enums_5_0=ruleEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"enums",
							lv_enums_5_0,
							"ru.iaie.reflex.Reflex.Enum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_4_2_0());
					}
					lv_functions_6_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"functions",
							lv_functions_6_0,
							"ru.iaie.reflex.Reflex.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getRegistersRegisterParserRuleCall_4_3_0());
					}
					lv_registers_7_0=ruleRegister
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"registers",
							lv_registers_7_0,
							"ru.iaie.reflex.Reflex.Register");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_4_4_0());
					}
					lv_processes_8_0=ruleProcess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"processes",
							lv_processes_8_0,
							"ru.iaie.reflex.Reflex.Process");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	iv_ruleProcess=ruleProcess
	{ $current=$iv_ruleProcess.current; }
	EOF;

// Rule Process
ruleProcess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='proc'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getVariableVariableParserRuleCall_3_0());
				}
				lv_variable_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"variable",
						lv_variable_3_0,
						"ru.iaie.reflex.Reflex.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_4_0());
				}
				lv_states_4_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"states",
						lv_states_4_0,
						"ru.iaie.reflex.Reflex.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getImportedVariableParserRuleCall_0());
		}
		this_ImportedVariable_0=ruleImportedVariable
		{
			$current = $this_ImportedVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getVariableAccess().getDeclaredVariableParserRuleCall_1_0());
			}
			this_DeclaredVariable_1=ruleDeclaredVariable
			{
				$current = $this_DeclaredVariable_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getSemicolonKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleImportedVariable
entryRuleImportedVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportedVariableRule()); }
	iv_ruleImportedVariable=ruleImportedVariable
	{ $current=$iv_ruleImportedVariable.current; }
	EOF;

// Rule ImportedVariable
ruleImportedVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='from'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportedVariableAccess().getFromKeyword_0());
		}
		otherlv_1='proc'
		{
			newLeafNode(otherlv_1, grammarAccess.getImportedVariableAccess().getProcKeyword_1());
		}
		(
			(
				lv_procId_2_0=RULE_ID
				{
					newLeafNode(lv_procId_2_0, grammarAccess.getImportedVariableAccess().getProcIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportedVariableRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						lv_procId_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_varNames_3_0=RULE_ID
				{
					newLeafNode(lv_varNames_3_0, grammarAccess.getImportedVariableAccess().getVarNamesIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportedVariableRule());
					}
					addWithLastConsumed(
						$current,
						"varNames",
						lv_varNames_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
	)
;

// Entry rule entryRuleDeclaredVariable
entryRuleDeclaredVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredVariableRule()); }
	iv_ruleDeclaredVariable=ruleDeclaredVariable
	{ $current=$iv_ruleDeclaredVariable.current; }
	EOF;

// Rule DeclaredVariable
ruleDeclaredVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeclaredVariableAccess().getPhysicalVariableParserRuleCall_0_0());
			}
			this_PhysicalVariable_0=rulePhysicalVariable
			{
				$current = $this_PhysicalVariable_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getDeclaredVariableAccess().getProgramVariableParserRuleCall_0_1());
			}
			this_ProgramVariable_1=ruleProgramVariable
			{
				$current = $this_ProgramVariable_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaredVariableAccess().getVisibilityVisibilityParserRuleCall_1_0());
				}
				lv_visibility_2_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaredVariableRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_2_0,
						"ru.iaie.reflex.Reflex.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePhysicalVariable
entryRulePhysicalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPhysicalVariableRule()); }
	iv_rulePhysicalVariable=rulePhysicalVariable
	{ $current=$iv_rulePhysicalVariable.current; }
	EOF;

// Rule PhysicalVariable
rulePhysicalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPhysicalVariableAccess().getTypeIntegerTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleIntegerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhysicalVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ru.iaie.reflex.Reflex.IntegerType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPhysicalVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPhysicalVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getPhysicalVariableAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPhysicalVariableAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_4_0());
				}
				lv_ports_4_0=ruleRegisterPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhysicalVariableRule());
					}
					add(
						$current,
						"ports",
						lv_ports_4_0,
						"ru.iaie.reflex.Reflex.RegisterPort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getPhysicalVariableAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_5_1_0());
					}
					lv_ports_6_0=ruleRegisterPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPhysicalVariableRule());
						}
						add(
							$current,
							"ports",
							lv_ports_6_0,
							"ru.iaie.reflex.Reflex.RegisterPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPhysicalVariableAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRegisterPort
entryRuleRegisterPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegisterPortRule()); }
	iv_ruleRegisterPort=ruleRegisterPort
	{ $current=$iv_ruleRegisterPort.current; }
	EOF;

// Rule RegisterPort
ruleRegisterPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_regName_0_0=RULE_ID
				{
					newLeafNode(lv_regName_0_0, grammarAccess.getRegisterPortAccess().getRegNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterPortRule());
					}
					setWithLastConsumed(
						$current,
						"regName",
						lv_regName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getRegisterPortAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRegisterPortAccess().getPortIntegerParserRuleCall_2_0());
				}
				lv_port_2_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegisterPortRule());
					}
					set(
						$current,
						"port",
						lv_port_2_0,
						"ru.iaie.reflex.Reflex.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getRegisterPortAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleProgramVariable
entryRuleProgramVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramVariableRule()); }
	iv_ruleProgramVariable=ruleProgramVariable
	{ $current=$iv_ruleProgramVariable.current; }
	EOF;

// Rule ProgramVariable
ruleProgramVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramVariableAccess().getTypeReflexTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleReflexType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ru.iaie.reflex.Reflex.ReflexType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVisibility
entryRuleVisibility returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVisibilityRule()); }
	iv_ruleVisibility=ruleVisibility
	{ $current=$iv_ruleVisibility.current; }
	EOF;

// Rule Visibility
ruleVisibility returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_LOCAL_0_0='local'
				{
					newLeafNode(lv_LOCAL_0_0, grammarAccess.getVisibilityAccess().getLOCALLocalKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVisibilityRule());
					}
					setWithLastConsumed($current, "LOCAL", lv_LOCAL_0_0, "local");
				}
			)
		)
		    |
		(
			(
				lv_GLOBAL_1_0='global'
				{
					newLeafNode(lv_GLOBAL_1_0, grammarAccess.getVisibilityAccess().getGLOBALGlobalKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVisibilityRule());
					}
					setWithLastConsumed($current, "GLOBAL", lv_GLOBAL_1_0, "global");
				}
			)
		)
		    |
		(
			(
				(
					lv_SHARED_2_0='shared'
					{
						newLeafNode(lv_SHARED_2_0, grammarAccess.getVisibilityAccess().getSHAREDSharedKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVisibilityRule());
						}
						setWithLastConsumed($current, "SHARED", lv_SHARED_2_0, "shared");
					}
				)
			)
			(
				(
					lv_sharingProcs_3_0=RULE_ID
					{
						newLeafNode(lv_sharingProcs_3_0, grammarAccess.getVisibilityAccess().getSharingProcsIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVisibilityRule());
						}
						addWithLastConsumed(
							$current,
							"sharingProcs",
							lv_sharingProcs_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='state'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateAccess().getStateKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getStateFunctionStateFunctionParserRuleCall_3_0());
				}
				lv_stateFunction_3_0=ruleStateFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"stateFunction",
						true,
						"ru.iaie.reflex.Reflex.StateFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTimeoutFunctionTimeoutFunctionParserRuleCall_4_0());
				}
				lv_timeoutFunction_4_0=ruleTimeoutFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"timeoutFunction",
						true,
						"ru.iaie.reflex.Reflex.TimeoutFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStateFunction
entryRuleStateFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateFunctionRule()); }
	iv_ruleStateFunction=ruleStateFunction
	{ $current=$iv_ruleStateFunction.current; }
	EOF;

// Rule StateFunction
ruleStateFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStateFunctionAccess().getBodyBodyParserRuleCall_0());
			}
			lv_body_0_0=ruleBody
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStateFunctionRule());
				}
				set(
					$current,
					"body",
					lv_body_0_0,
					"ru.iaie.reflex.Reflex.Body");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTimeoutFunction
entryRuleTimeoutFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeoutFunctionRule()); }
	iv_ruleTimeoutFunction=ruleTimeoutFunction
	{ $current=$iv_ruleTimeoutFunction.current; }
	EOF;

// Rule TimeoutFunction
ruleTimeoutFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='timeout'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeoutFunctionAccess().getTimeoutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutFunctionAccess().getTimeTimeParserRuleCall_1_0());
				}
				lv_time_1_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutFunctionRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"ru.iaie.reflex.Reflex.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutFunctionAccess().getBodyBodyParserRuleCall_2_0());
				}
				lv_body_2_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutFunctionRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"ru.iaie.reflex.Reflex.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBodyAccess().getBodyAction_0_0(),
						$current);
				}
			)
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getBodyAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBodyAccess().getSubBodyParserRuleCall_1_1_0());
					}
					lv_sub_3_0=ruleBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"sub",
							lv_sub_3_0,
							"ru.iaie.reflex.Reflex.Body");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getAssignStatParserRuleCall_2());
		}
		this_AssignStat_5=ruleAssignStat
		{
			$current = $this_AssignStat_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getIfElseStatParserRuleCall_3());
		}
		this_IfElseStat_6=ruleIfElseStat
		{
			$current = $this_IfElseStat_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getSwitchStatParserRuleCall_4());
		}
		this_SwitchStat_7=ruleSwitchStat
		{
			$current = $this_SwitchStat_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getStartProcStatParserRuleCall_5());
		}
		this_StartProcStat_8=ruleStartProcStat
		{
			$current = $this_StartProcStat_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getStopProcStatParserRuleCall_6());
		}
		this_StopProcStat_9=ruleStopProcStat
		{
			$current = $this_StopProcStat_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getErrorStatParserRuleCall_7());
		}
		this_ErrorStat_10=ruleErrorStat
		{
			$current = $this_ErrorStat_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBodyAccess().getBodyAction_8_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBodyAccess().getLoopStatParserRuleCall_8_1());
			}
			ruleLoopStat
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBodyAccess().getBodyAction_9_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBodyAccess().getRestartStatParserRuleCall_9_1());
			}
			ruleRestartStat
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBodyAccess().getSetStateStatParserRuleCall_10());
		}
		this_SetStateStat_15=ruleSetStateStat
		{
			$current = $this_SetStateStat_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignStat
entryRuleAssignStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignStatRule()); }
	iv_ruleAssignStat=ruleAssignStat
	{ $current=$iv_ruleAssignStat.current; }
	EOF;

// Rule AssignStat
ruleAssignStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_varId_0_0=RULE_ID
				{
					newLeafNode(lv_varId_0_0, grammarAccess.getAssignStatAccess().getVarIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignStatRule());
					}
					setWithLastConsumed(
						$current,
						"varId",
						lv_varId_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignStatAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignStatAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignStatRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssignStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleIfElseStat
entryRuleIfElseStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseStatRule()); }
	iv_ruleIfElseStat=ruleIfElseStat
	{ $current=$iv_ruleIfElseStat.current; }
	EOF;

// Rule IfElseStat
ruleIfElseStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseStatAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfElseStatAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseStatAccess().getCondConditionParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseStatRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"ru.iaie.reflex.Reflex.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfElseStatAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseStatAccess().getThenBodyParserRuleCall_4_0());
				}
				lv_then_4_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseStatRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"ru.iaie.reflex.Reflex.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfElseStatAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfElseStatAccess().getElseBodyParserRuleCall_5_1_0());
					}
					lv_else_6_0=ruleBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfElseStatRule());
						}
						set(
							$current,
							"else",
							lv_else_6_0,
							"ru.iaie.reflex.Reflex.Body");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSwitchStat
entryRuleSwitchStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStatRule()); }
	iv_ruleSwitchStat=ruleSwitchStat
	{ $current=$iv_ruleSwitchStat.current; }
	EOF;

// Rule SwitchStat
ruleSwitchStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchStatAccess().getSwitchKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchStatAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwitchStatAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchStatAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatAccess().getOptionsCaseStatParserRuleCall_5_0());
				}
				lv_options_5_0=ruleCaseStat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatRule());
					}
					add(
						$current,
						"options",
						lv_options_5_0,
						"ru.iaie.reflex.Reflex.CaseStat");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSwitchStatAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCaseStat
entryRuleCaseStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatRule()); }
	iv_ruleCaseStat=ruleCaseStat
	{ $current=$iv_ruleCaseStat.current; }
	EOF;

// Rule CaseStat
ruleCaseStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStatAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatAccess().getOptionIntegerParserRuleCall_1_0());
				}
				lv_option_1_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatRule());
					}
					set(
						$current,
						"option",
						lv_option_1_0,
						"ru.iaie.reflex.Reflex.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseStatAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatAccess().getBodyBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"ru.iaie.reflex.Reflex.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='break'
			{
				newLeafNode(otherlv_4, grammarAccess.getCaseStatAccess().getBreakKeyword_4_0());
			}
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getCaseStatAccess().getSemicolonKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleStartProcStat
entryRuleStartProcStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartProcStatRule()); }
	iv_ruleStartProcStat=ruleStartProcStat
	{ $current=$iv_ruleStartProcStat.current; }
	EOF;

// Rule StartProcStat
ruleStartProcStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartProcStatAccess().getStartKeyword_0());
		}
		(
			(
				lv_procId_1_0=RULE_ID
				{
					newLeafNode(lv_procId_1_0, grammarAccess.getStartProcStatAccess().getProcIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartProcStatRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						lv_procId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getStartProcStatAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleStopProcStat
entryRuleStopProcStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopProcStatRule()); }
	iv_ruleStopProcStat=ruleStopProcStat
	{ $current=$iv_ruleStopProcStat.current; }
	EOF;

// Rule StopProcStat
ruleStopProcStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStopProcStatAccess().getStopProcStatAction_0(),
					$current);
			}
		)
		otherlv_1='stop'
		{
			newLeafNode(otherlv_1, grammarAccess.getStopProcStatAccess().getStopKeyword_1());
		}
		(
			(
				lv_procId_2_0=RULE_ID
				{
					newLeafNode(lv_procId_2_0, grammarAccess.getStopProcStatAccess().getProcIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopProcStatRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						true,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getStopProcStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleErrorStat
entryRuleErrorStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorStatRule()); }
	iv_ruleErrorStat=ruleErrorStat
	{ $current=$iv_ruleErrorStat.current; }
	EOF;

// Rule ErrorStat
ruleErrorStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getErrorStatAccess().getErrorStatAction_0(),
					$current);
			}
		)
		otherlv_1='error'
		{
			newLeafNode(otherlv_1, grammarAccess.getErrorStatAccess().getErrorKeyword_1());
		}
		(
			(
				lv_procId_2_0=RULE_ID
				{
					newLeafNode(lv_procId_2_0, grammarAccess.getErrorStatAccess().getProcIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getErrorStatRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						true,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getErrorStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleLoopStat
entryRuleLoopStat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLoopStatRule()); }
	iv_ruleLoopStat=ruleLoopStat
	{ $current=$iv_ruleLoopStat.current.getText(); }
	EOF;

// Rule LoopStat
ruleLoopStat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='loop'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopStatAccess().getLoopKeyword_0());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopStatAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleRestartStat
entryRuleRestartStat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRestartStatRule()); }
	iv_ruleRestartStat=ruleRestartStat
	{ $current=$iv_ruleRestartStat.current.getText(); }
	EOF;

// Rule RestartStat
ruleRestartStat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='restart'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRestartStatAccess().getRestartKeyword_0());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRestartStatAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleSetStateStat
entryRuleSetStateStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetStateStatRule()); }
	iv_ruleSetStateStat=ruleSetStateStat
	{ $current=$iv_ruleSetStateStat.current; }
	EOF;

// Rule SetStateStat
ruleSetStateStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetStateStatAccess().getSetStateStatAction_0(),
					$current);
			}
		)
		otherlv_1='set'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetStateStatAccess().getSetKeyword_1());
		}
		(
			(
				otherlv_2='state'
				{
					newLeafNode(otherlv_2, grammarAccess.getSetStateStatAccess().getStateKeyword_2_0_0());
				}
				(
					(
						lv_stateId_3_0=RULE_ID
						{
							newLeafNode(lv_stateId_3_0, grammarAccess.getSetStateStatAccess().getStateIdIDTerminalRuleCall_2_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetStateStatRule());
							}
							setWithLastConsumed(
								$current,
								"stateId",
								lv_stateId_3_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			    |
			otherlv_4='next'
			{
				newLeafNode(otherlv_4, grammarAccess.getSetStateStatAccess().getNextKeyword_2_1());
			}
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetStateStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getReturnTypeCTypeParserRuleCall_0_0());
				}
				lv_returnType_0_0=ruleCType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_0_0,
						"ru.iaie.reflex.Reflex.CType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_3_0());
				}
				lv_argTypes_3_0=ruleCType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"argTypes",
						lv_argTypes_3_0,
						"ru.iaie.reflex.Reflex.CType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_4_1_0());
					}
					lv_argTypes_5_0=ruleCType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"argTypes",
							lv_argTypes_5_0,
							"ru.iaie.reflex.Reflex.CType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleRegister
entryRuleRegister returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegisterRule()); }
	iv_ruleRegister=ruleRegister
	{ $current=$iv_ruleRegister.current; }
	EOF;

// Rule Register
ruleRegister returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleRegisterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegisterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ru.iaie.reflex.Reflex.RegisterType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRegisterAccess().getAddr1IntegerParserRuleCall_2_0());
				}
				lv_addr1_2_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegisterRule());
					}
					set(
						$current,
						"addr1",
						lv_addr1_2_0,
						"ru.iaie.reflex.Reflex.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRegisterAccess().getAddr2IntegerParserRuleCall_3_0());
				}
				lv_addr2_3_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegisterRule());
					}
					set(
						$current,
						"addr2",
						lv_addr2_3_0,
						"ru.iaie.reflex.Reflex.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_regSize_4_0=RULE_REG_SIZE
				{
					newLeafNode(lv_regSize_4_0, grammarAccess.getRegisterAccess().getRegSizeREG_SIZETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterRule());
					}
					setWithLastConsumed(
						$current,
						"regSize",
						lv_regSize_4_0,
						"ru.iaie.reflex.Reflex.REG_SIZE");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRegisterAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstAccess().getConstKeyword_0());
		}
		(
			(
				lv_constId_1_0=RULE_ID
				{
					newLeafNode(lv_constId_1_0, grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstRule());
					}
					setWithLastConsumed(
						$current,
						"constId",
						lv_constId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0());
				}
				lv_constValue_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstRule());
					}
					set(
						$current,
						"constValue",
						lv_constValue_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	iv_ruleEnum=ruleEnum
	{ $current=$iv_ruleEnum.current; }
	EOF;

// Rule Enum
ruleEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_1_0());
				}
				lv_enumMembers_1_0=ruleEnumMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumRule());
					}
					add(
						$current,
						"enumMembers",
						lv_enumMembers_1_0,
						"ru.iaie.reflex.Reflex.EnumMember");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_2_1_0());
					}
					lv_enumMembers_3_0=ruleEnumMember
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumRule());
						}
						add(
							$current,
							"enumMembers",
							lv_enumMembers_3_0,
							"ru.iaie.reflex.Reflex.EnumMember");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getEnumAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleEnumMember
entryRuleEnumMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumMemberRule()); }
	iv_ruleEnumMember=ruleEnumMember
	{ $current=$iv_ruleEnumMember.current; }
	EOF;

// Rule EnumMember
ruleEnumMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumMemberRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumMemberRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIntegerParserRuleCall_0());
		}
		this_Integer_0=ruleInteger
		{
			$current = $this_Integer_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_1=RULE_ID
		{
			newLeafNode(this_ID_1, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionAccess().getIntegerParserRuleCall_0());
		}
		this_Integer_0=ruleInteger
		{
			$current = $this_Integer_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_1=RULE_ID
		{
			newLeafNode(this_ID_1, grammarAccess.getConditionAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCType
entryRuleCType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCTypeRule()); }
	iv_ruleCType=ruleCType
	{ $current=$iv_ruleCType.current; }
	EOF;

// Rule CType
ruleCType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_0_0(),
						$current);
				}
			)
			this_VOID_C_TYPE_1=RULE_VOID_C_TYPE
			{
				newLeafNode(this_VOID_C_TYPE_1, grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_1_0(),
						$current);
				}
			)
			this_FLOAT_C_TYPE_3=RULE_FLOAT_C_TYPE
			{
				newLeafNode(this_FLOAT_C_TYPE_3, grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_2_0(),
						$current);
				}
			)
			this_DOUBLE_C_TYPE_5=RULE_DOUBLE_C_TYPE
			{
				newLeafNode(this_DOUBLE_C_TYPE_5, grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCTypeAccess().getSignSpecCTypeSignSpecEnumRuleCall_3_1_0());
					}
					lv_signSpec_7_0=ruleCTypeSignSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCTypeRule());
						}
						set(
							$current,
							"signSpec",
							true,
							"ru.iaie.reflex.Reflex.CTypeSignSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				this_SHORT_C_TYPE_8=RULE_SHORT_C_TYPE
				{
					newLeafNode(this_SHORT_C_TYPE_8, grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0());
				}
				    |
				this_INT_C_TYPE_9=RULE_INT_C_TYPE
				{
					newLeafNode(this_INT_C_TYPE_9, grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1());
				}
				    |
				this_LONG_C_TYPE_10=RULE_LONG_C_TYPE
				{
					newLeafNode(this_LONG_C_TYPE_10, grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2());
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	iv_ruleIntegerType=ruleIntegerType
	{ $current=$iv_ruleIntegerType.current.getText(); }
	EOF;

// Rule IntegerType
ruleIntegerType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BOOL_TYPE_0=RULE_BOOL_TYPE
		{
			$current.merge(this_BOOL_TYPE_0);
		}
		{
			newLeafNode(this_BOOL_TYPE_0, grammarAccess.getIntegerTypeAccess().getBOOL_TYPETerminalRuleCall_0());
		}
		    |
		this_INT_C_TYPE_1=RULE_INT_C_TYPE
		{
			$current.merge(this_INT_C_TYPE_1);
		}
		{
			newLeafNode(this_INT_C_TYPE_1, grammarAccess.getIntegerTypeAccess().getINT_C_TYPETerminalRuleCall_1());
		}
		    |
		this_SHORT_C_TYPE_2=RULE_SHORT_C_TYPE
		{
			$current.merge(this_SHORT_C_TYPE_2);
		}
		{
			newLeafNode(this_SHORT_C_TYPE_2, grammarAccess.getIntegerTypeAccess().getSHORT_C_TYPETerminalRuleCall_2());
		}
		    |
		this_LONG_C_TYPE_3=RULE_LONG_C_TYPE
		{
			$current.merge(this_LONG_C_TYPE_3);
		}
		{
			newLeafNode(this_LONG_C_TYPE_3, grammarAccess.getIntegerTypeAccess().getLONG_C_TYPETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleReflexType
entryRuleReflexType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReflexTypeRule()); }
	iv_ruleReflexType=ruleReflexType
	{ $current=$iv_ruleReflexType.current; }
	EOF;

// Rule ReflexType
ruleReflexType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReflexTypeAccess().getCTypeParserRuleCall_0());
		}
		this_CType_0=ruleCType
		{
			$current = $this_CType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getReflexTypeAccess().getReflexTypeAction_1_0(),
						$current);
				}
			)
			this_BOOL_TYPE_2=RULE_BOOL_TYPE
			{
				newLeafNode(this_BOOL_TYPE_2, grammarAccess.getReflexTypeAccess().getBOOL_TYPETerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current; }
	EOF;

// Rule Integer
ruleInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_value_0_1=RULE_DECIMAL
					{
						newLeafNode(lv_value_0_1, grammarAccess.getIntegerAccess().getValueDECIMALTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntegerRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_0_1,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
					    |
					lv_value_0_2=RULE_OCTAL
					{
						newLeafNode(lv_value_0_2, grammarAccess.getIntegerAccess().getValueOCTALTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntegerRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_0_2,
							"ru.iaie.reflex.Reflex.OCTAL");
					}
					    |
					lv_value_0_3=RULE_HEX
					{
						newLeafNode(lv_value_0_3, grammarAccess.getIntegerAccess().getValueHEXTerminalRuleCall_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntegerRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_0_3,
							"ru.iaie.reflex.Reflex.HEX");
					}
				)
			)
		)
		(
			(
				(
					lv_qualfier_1_1=RULE_LONG
					{
						newLeafNode(lv_qualfier_1_1, grammarAccess.getIntegerAccess().getQualfierLONGTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntegerRule());
						}
						setWithLastConsumed(
							$current,
							"qualfier",
							true,
							"ru.iaie.reflex.Reflex.LONG");
					}
					    |
					lv_qualfier_1_2=RULE_UNSIGNED
					{
						newLeafNode(lv_qualfier_1_2, grammarAccess.getIntegerAccess().getQualfierUNSIGNEDTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntegerRule());
						}
						setWithLastConsumed(
							$current,
							"qualfier",
							true,
							"ru.iaie.reflex.Reflex.UNSIGNED");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='0t'
			{
				newLeafNode(otherlv_0, grammarAccess.getTimeAccess().getTKeyword_0_0());
			}
			    |
			otherlv_1='0T'
			{
				newLeafNode(otherlv_1, grammarAccess.getTimeAccess().getTKeyword_0_1());
			}
		)
		(
			this_DAY_2=RULE_DAY
			{
				newLeafNode(this_DAY_2, grammarAccess.getTimeAccess().getDAYTerminalRuleCall_1_0());
			}
			(
				(
					lv_days_3_0=RULE_DECIMAL
					{
						newLeafNode(lv_days_3_0, grammarAccess.getTimeAccess().getDaysDECIMALTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"days",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
		(
			this_HOUR_4=RULE_HOUR
			{
				newLeafNode(this_HOUR_4, grammarAccess.getTimeAccess().getHOURTerminalRuleCall_2_0());
			}
			(
				(
					lv_hours_5_0=RULE_DECIMAL
					{
						newLeafNode(lv_hours_5_0, grammarAccess.getTimeAccess().getHoursDECIMALTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"hours",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
		(
			this_MINUTE_6=RULE_MINUTE
			{
				newLeafNode(this_MINUTE_6, grammarAccess.getTimeAccess().getMINUTETerminalRuleCall_3_0());
			}
			(
				(
					lv_minutes_7_0=RULE_DECIMAL
					{
						newLeafNode(lv_minutes_7_0, grammarAccess.getTimeAccess().getMinutesDECIMALTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"minutes",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
		(
			this_SECOND_8=RULE_SECOND
			{
				newLeafNode(this_SECOND_8, grammarAccess.getTimeAccess().getSECONDTerminalRuleCall_4_0());
			}
			(
				(
					lv_seconds_9_0=RULE_DECIMAL
					{
						newLeafNode(lv_seconds_9_0, grammarAccess.getTimeAccess().getSecondsDECIMALTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"seconds",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
		(
			this_MILISECOND_10=RULE_MILISECOND
			{
				newLeafNode(this_MILISECOND_10, grammarAccess.getTimeAccess().getMILISECONDTerminalRuleCall_5_0());
			}
			(
				(
					lv_milis_11_0=RULE_DECIMAL
					{
						newLeafNode(lv_milis_11_0, grammarAccess.getTimeAccess().getMilisDECIMALTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"milis",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
		(
			this_MICROSECOND_12=RULE_MICROSECOND
			{
				newLeafNode(this_MICROSECOND_12, grammarAccess.getTimeAccess().getMICROSECONDTerminalRuleCall_6_0());
			}
			(
				(
					lv_micros_13_0=RULE_DECIMAL
					{
						newLeafNode(lv_micros_13_0, grammarAccess.getTimeAccess().getMicrosDECIMALTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"micros",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
		(
			this_NANOSECOND_14=RULE_NANOSECOND
			{
				newLeafNode(this_NANOSECOND_14, grammarAccess.getTimeAccess().getNANOSECONDTerminalRuleCall_7_0());
			}
			(
				(
					lv_nanos_15_0=RULE_DECIMAL
					{
						newLeafNode(lv_nanos_15_0, grammarAccess.getTimeAccess().getNanosDECIMALTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeRule());
						}
						setWithLastConsumed(
							$current,
							"nanos",
							true,
							"ru.iaie.reflex.Reflex.DECIMAL");
					}
				)
			)
		)?
	)
;

// Rule RegisterType
ruleRegisterType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='input'
			{
				$current = grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='output'
			{
				$current = grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CTypeSignSpec
ruleCTypeSignSpec returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='signed'
			{
				$current = grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='unsigned'
			{
				$current = grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_VOID_C_TYPE : 'void';

RULE_FLOAT_C_TYPE : 'float';

RULE_DOUBLE_C_TYPE : 'double';

RULE_SHORT_C_TYPE : 'short';

RULE_INT_C_TYPE : 'int';

RULE_LONG_C_TYPE : 'long';

RULE_BOOL_TYPE : 'bool';

RULE_TACT : 'tact';

RULE_REG_SIZE : ('8'|'16');

RULE_DECIMAL : '1'..'9' ('0'..'9')*;

RULE_OCTAL : '0' ('0'..'7')*;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_LONG : ('L'|'l');

RULE_UNSIGNED : ('U'|'u');

RULE_DAY : ('D'|'d');

RULE_HOUR : ('H'|'h');

RULE_MINUTE : ('M'|'m');

RULE_SECOND : ('S'|'s');

RULE_MILISECOND : ('MS'|'ms');

RULE_MICROSECOND : ('US'|'us');

RULE_NANOSECOND : ('NS'|'ns');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
