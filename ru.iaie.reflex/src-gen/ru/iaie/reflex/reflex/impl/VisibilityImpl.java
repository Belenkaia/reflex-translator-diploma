/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.Visibility;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Visibility</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflex.reflex.impl.VisibilityImpl#getLOCAL <em>LOCAL</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.VisibilityImpl#getGLOBAL <em>GLOBAL</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.VisibilityImpl#getSHARED <em>SHARED</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.VisibilityImpl#getSharingProcs <em>Sharing Procs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VisibilityImpl extends MinimalEObjectImpl.Container implements Visibility
{
  /**
   * The default value of the '{@link #getLOCAL() <em>LOCAL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLOCAL()
   * @generated
   * @ordered
   */
  protected static final String LOCAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLOCAL() <em>LOCAL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLOCAL()
   * @generated
   * @ordered
   */
  protected String local = LOCAL_EDEFAULT;

  /**
   * The default value of the '{@link #getGLOBAL() <em>GLOBAL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGLOBAL()
   * @generated
   * @ordered
   */
  protected static final String GLOBAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGLOBAL() <em>GLOBAL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGLOBAL()
   * @generated
   * @ordered
   */
  protected String global = GLOBAL_EDEFAULT;

  /**
   * The default value of the '{@link #getSHARED() <em>SHARED</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSHARED()
   * @generated
   * @ordered
   */
  protected static final String SHARED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSHARED() <em>SHARED</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSHARED()
   * @generated
   * @ordered
   */
  protected String shared = SHARED_EDEFAULT;

  /**
   * The cached value of the '{@link #getSharingProcs() <em>Sharing Procs</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSharingProcs()
   * @generated
   * @ordered
   */
  protected EList<String> sharingProcs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VisibilityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexPackage.Literals.VISIBILITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLOCAL()
  {
    return local;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLOCAL(String newLOCAL)
  {
    String oldLOCAL = local;
    local = newLOCAL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.VISIBILITY__LOCAL, oldLOCAL, local));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGLOBAL()
  {
    return global;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGLOBAL(String newGLOBAL)
  {
    String oldGLOBAL = global;
    global = newGLOBAL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.VISIBILITY__GLOBAL, oldGLOBAL, global));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSHARED()
  {
    return shared;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSHARED(String newSHARED)
  {
    String oldSHARED = shared;
    shared = newSHARED;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.VISIBILITY__SHARED, oldSHARED, shared));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSharingProcs()
  {
    if (sharingProcs == null)
    {
      sharingProcs = new EDataTypeEList<String>(String.class, this, ReflexPackage.VISIBILITY__SHARING_PROCS);
    }
    return sharingProcs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexPackage.VISIBILITY__LOCAL:
        return getLOCAL();
      case ReflexPackage.VISIBILITY__GLOBAL:
        return getGLOBAL();
      case ReflexPackage.VISIBILITY__SHARED:
        return getSHARED();
      case ReflexPackage.VISIBILITY__SHARING_PROCS:
        return getSharingProcs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexPackage.VISIBILITY__LOCAL:
        setLOCAL((String)newValue);
        return;
      case ReflexPackage.VISIBILITY__GLOBAL:
        setGLOBAL((String)newValue);
        return;
      case ReflexPackage.VISIBILITY__SHARED:
        setSHARED((String)newValue);
        return;
      case ReflexPackage.VISIBILITY__SHARING_PROCS:
        getSharingProcs().clear();
        getSharingProcs().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.VISIBILITY__LOCAL:
        setLOCAL(LOCAL_EDEFAULT);
        return;
      case ReflexPackage.VISIBILITY__GLOBAL:
        setGLOBAL(GLOBAL_EDEFAULT);
        return;
      case ReflexPackage.VISIBILITY__SHARED:
        setSHARED(SHARED_EDEFAULT);
        return;
      case ReflexPackage.VISIBILITY__SHARING_PROCS:
        getSharingProcs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.VISIBILITY__LOCAL:
        return LOCAL_EDEFAULT == null ? local != null : !LOCAL_EDEFAULT.equals(local);
      case ReflexPackage.VISIBILITY__GLOBAL:
        return GLOBAL_EDEFAULT == null ? global != null : !GLOBAL_EDEFAULT.equals(global);
      case ReflexPackage.VISIBILITY__SHARED:
        return SHARED_EDEFAULT == null ? shared != null : !SHARED_EDEFAULT.equals(shared);
      case ReflexPackage.VISIBILITY__SHARING_PROCS:
        return sharingProcs != null && !sharingProcs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (LOCAL: ");
    result.append(local);
    result.append(", GLOBAL: ");
    result.append(global);
    result.append(", SHARED: ");
    result.append(shared);
    result.append(", sharingProcs: ");
    result.append(sharingProcs);
    result.append(')');
    return result.toString();
  }

} //VisibilityImpl
