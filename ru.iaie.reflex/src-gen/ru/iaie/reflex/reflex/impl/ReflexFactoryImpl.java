/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import ru.iaie.reflex.reflex.AssignStat;
import ru.iaie.reflex.reflex.Body;
import ru.iaie.reflex.reflex.CType;
import ru.iaie.reflex.reflex.CTypeSignSpec;
import ru.iaie.reflex.reflex.CaseStat;
import ru.iaie.reflex.reflex.Condition;
import ru.iaie.reflex.reflex.Const;
import ru.iaie.reflex.reflex.DeclaredVariable;
import ru.iaie.reflex.reflex.EnumMember;
import ru.iaie.reflex.reflex.ErrorStat;
import ru.iaie.reflex.reflex.Expression;
import ru.iaie.reflex.reflex.Function;
import ru.iaie.reflex.reflex.IfElseStat;
import ru.iaie.reflex.reflex.ImportedVariable;
import ru.iaie.reflex.reflex.PhysicalVariable;
import ru.iaie.reflex.reflex.Program;
import ru.iaie.reflex.reflex.ProgramVariable;
import ru.iaie.reflex.reflex.ReflexFactory;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.ReflexType;
import ru.iaie.reflex.reflex.Register;
import ru.iaie.reflex.reflex.RegisterPort;
import ru.iaie.reflex.reflex.RegisterType;
import ru.iaie.reflex.reflex.SetStateStat;
import ru.iaie.reflex.reflex.StartProcStat;
import ru.iaie.reflex.reflex.State;
import ru.iaie.reflex.reflex.StateFunction;
import ru.iaie.reflex.reflex.StopProcStat;
import ru.iaie.reflex.reflex.SwitchStat;
import ru.iaie.reflex.reflex.Time;
import ru.iaie.reflex.reflex.TimeoutFunction;
import ru.iaie.reflex.reflex.Variable;
import ru.iaie.reflex.reflex.Visibility;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ReflexFactoryImpl extends EFactoryImpl implements ReflexFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ReflexFactory init()
  {
    try
    {
      ReflexFactory theReflexFactory = (ReflexFactory)EPackage.Registry.INSTANCE.getEFactory(ReflexPackage.eNS_URI);
      if (theReflexFactory != null)
      {
        return theReflexFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ReflexFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReflexFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ReflexPackage.PROGRAM: return createProgram();
      case ReflexPackage.PROCESS: return createProcess();
      case ReflexPackage.VARIABLE: return createVariable();
      case ReflexPackage.IMPORTED_VARIABLE: return createImportedVariable();
      case ReflexPackage.DECLARED_VARIABLE: return createDeclaredVariable();
      case ReflexPackage.PHYSICAL_VARIABLE: return createPhysicalVariable();
      case ReflexPackage.REGISTER_PORT: return createRegisterPort();
      case ReflexPackage.PROGRAM_VARIABLE: return createProgramVariable();
      case ReflexPackage.VISIBILITY: return createVisibility();
      case ReflexPackage.STATE: return createState();
      case ReflexPackage.STATE_FUNCTION: return createStateFunction();
      case ReflexPackage.TIMEOUT_FUNCTION: return createTimeoutFunction();
      case ReflexPackage.BODY: return createBody();
      case ReflexPackage.ASSIGN_STAT: return createAssignStat();
      case ReflexPackage.IF_ELSE_STAT: return createIfElseStat();
      case ReflexPackage.SWITCH_STAT: return createSwitchStat();
      case ReflexPackage.CASE_STAT: return createCaseStat();
      case ReflexPackage.START_PROC_STAT: return createStartProcStat();
      case ReflexPackage.STOP_PROC_STAT: return createStopProcStat();
      case ReflexPackage.ERROR_STAT: return createErrorStat();
      case ReflexPackage.SET_STATE_STAT: return createSetStateStat();
      case ReflexPackage.FUNCTION: return createFunction();
      case ReflexPackage.REGISTER: return createRegister();
      case ReflexPackage.CONST: return createConst();
      case ReflexPackage.ENUM: return createEnum();
      case ReflexPackage.ENUM_MEMBER: return createEnumMember();
      case ReflexPackage.EXPRESSION: return createExpression();
      case ReflexPackage.CONDITION: return createCondition();
      case ReflexPackage.CTYPE: return createCType();
      case ReflexPackage.REFLEX_TYPE: return createReflexType();
      case ReflexPackage.INTEGER: return createInteger();
      case ReflexPackage.TIME: return createTime();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReflexPackage.REGISTER_TYPE:
        return createRegisterTypeFromString(eDataType, initialValue);
      case ReflexPackage.CTYPE_SIGN_SPEC:
        return createCTypeSignSpecFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReflexPackage.REGISTER_TYPE:
        return convertRegisterTypeToString(eDataType, instanceValue);
      case ReflexPackage.CTYPE_SIGN_SPEC:
        return convertCTypeSignSpecToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ru.iaie.reflex.reflex.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportedVariable createImportedVariable()
  {
    ImportedVariableImpl importedVariable = new ImportedVariableImpl();
    return importedVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclaredVariable createDeclaredVariable()
  {
    DeclaredVariableImpl declaredVariable = new DeclaredVariableImpl();
    return declaredVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalVariable createPhysicalVariable()
  {
    PhysicalVariableImpl physicalVariable = new PhysicalVariableImpl();
    return physicalVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegisterPort createRegisterPort()
  {
    RegisterPortImpl registerPort = new RegisterPortImpl();
    return registerPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProgramVariable createProgramVariable()
  {
    ProgramVariableImpl programVariable = new ProgramVariableImpl();
    return programVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visibility createVisibility()
  {
    VisibilityImpl visibility = new VisibilityImpl();
    return visibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateFunction createStateFunction()
  {
    StateFunctionImpl stateFunction = new StateFunctionImpl();
    return stateFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeoutFunction createTimeoutFunction()
  {
    TimeoutFunctionImpl timeoutFunction = new TimeoutFunctionImpl();
    return timeoutFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignStat createAssignStat()
  {
    AssignStatImpl assignStat = new AssignStatImpl();
    return assignStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfElseStat createIfElseStat()
  {
    IfElseStatImpl ifElseStat = new IfElseStatImpl();
    return ifElseStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchStat createSwitchStat()
  {
    SwitchStatImpl switchStat = new SwitchStatImpl();
    return switchStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseStat createCaseStat()
  {
    CaseStatImpl caseStat = new CaseStatImpl();
    return caseStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartProcStat createStartProcStat()
  {
    StartProcStatImpl startProcStat = new StartProcStatImpl();
    return startProcStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StopProcStat createStopProcStat()
  {
    StopProcStatImpl stopProcStat = new StopProcStatImpl();
    return stopProcStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ErrorStat createErrorStat()
  {
    ErrorStatImpl errorStat = new ErrorStatImpl();
    return errorStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetStateStat createSetStateStat()
  {
    SetStateStatImpl setStateStat = new SetStateStatImpl();
    return setStateStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Register createRegister()
  {
    RegisterImpl register = new RegisterImpl();
    return register;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Const createConst()
  {
    ConstImpl const_ = new ConstImpl();
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ru.iaie.reflex.reflex.Enum createEnum()
  {
    EnumImpl enum_ = new EnumImpl();
    return enum_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumMember createEnumMember()
  {
    EnumMemberImpl enumMember = new EnumMemberImpl();
    return enumMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CType createCType()
  {
    CTypeImpl cType = new CTypeImpl();
    return cType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReflexType createReflexType()
  {
    ReflexTypeImpl reflexType = new ReflexTypeImpl();
    return reflexType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ru.iaie.reflex.reflex.Integer createInteger()
  {
    IntegerImpl integer = new IntegerImpl();
    return integer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegisterType createRegisterTypeFromString(EDataType eDataType, String initialValue)
  {
    RegisterType result = RegisterType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRegisterTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CTypeSignSpec createCTypeSignSpecFromString(EDataType eDataType, String initialValue)
  {
    CTypeSignSpec result = CTypeSignSpec.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCTypeSignSpecToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReflexPackage getReflexPackage()
  {
    return (ReflexPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ReflexPackage getPackage()
  {
    return ReflexPackage.eINSTANCE;
  }

} //ReflexFactoryImpl
