/*
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReflexGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTicksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTicksTACTTerminalRuleCall_3_0 = (RuleCall)cTicksAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cConstsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cConstsConstParserRuleCall_4_0_0 = (RuleCall)cConstsAssignment_4_0.eContents().get(0);
		private final Assignment cEnumsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEnumsEnumParserRuleCall_4_1_0 = (RuleCall)cEnumsAssignment_4_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_4_2_0 = (RuleCall)cFunctionsAssignment_4_2.eContents().get(0);
		private final Assignment cRegistersAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cRegistersRegisterParserRuleCall_4_3_0 = (RuleCall)cRegistersAssignment_4_3.eContents().get(0);
		private final Assignment cProcessesAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cProcessesProcessParserRuleCall_4_4_0 = (RuleCall)cProcessesAssignment_4_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program:
		//	"program" name=ID "{"
		//	ticks?=TACT? (consts+=Const | enums+=Enum | functions+=Function | registers+=Register | processes+=Process)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"program" name=ID "{" ticks?=TACT? (consts+=Const | enums+=Enum | functions+=Function | registers+=Register |
		//processes+=Process)* "}"
		public Group getGroup() { return cGroup; }
		
		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ticks?=TACT?
		public Assignment getTicksAssignment_3() { return cTicksAssignment_3; }
		
		//TACT
		public RuleCall getTicksTACTTerminalRuleCall_3_0() { return cTicksTACTTerminalRuleCall_3_0; }
		
		//(consts+=Const | enums+=Enum | functions+=Function | registers+=Register | processes+=Process)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//consts+=Const
		public Assignment getConstsAssignment_4_0() { return cConstsAssignment_4_0; }
		
		//Const
		public RuleCall getConstsConstParserRuleCall_4_0_0() { return cConstsConstParserRuleCall_4_0_0; }
		
		//enums+=Enum
		public Assignment getEnumsAssignment_4_1() { return cEnumsAssignment_4_1; }
		
		//Enum
		public RuleCall getEnumsEnumParserRuleCall_4_1_0() { return cEnumsEnumParserRuleCall_4_1_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_4_2() { return cFunctionsAssignment_4_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_4_2_0() { return cFunctionsFunctionParserRuleCall_4_2_0; }
		
		//registers+=Register
		public Assignment getRegistersAssignment_4_3() { return cRegistersAssignment_4_3; }
		
		//Register
		public RuleCall getRegistersRegisterParserRuleCall_4_3_0() { return cRegistersRegisterParserRuleCall_4_3_0; }
		
		//processes+=Process
		public Assignment getProcessesAssignment_4_4() { return cProcessesAssignment_4_4; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_4_4_0() { return cProcessesProcessParserRuleCall_4_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process:
		//	"proc" name=ID "{"
		//	variable+=Variable*
		//	states+=State*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"proc" name=ID "{" variable+=Variable* states+=State* "}"
		public Group getGroup() { return cGroup; }
		
		//"proc"
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//variable+=Variable*
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportedVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaredVariableParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// Variables
		//Variable:
		//	ImportedVariable | DeclaredVariable ";";
		@Override public ParserRule getRule() { return rule; }
		
		//ImportedVariable | DeclaredVariable ";"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ImportedVariable
		public RuleCall getImportedVariableParserRuleCall_0() { return cImportedVariableParserRuleCall_0; }
		
		//DeclaredVariable ";"
		public Group getGroup_1() { return cGroup_1; }
		
		//DeclaredVariable
		public RuleCall getDeclaredVariableParserRuleCall_1_0() { return cDeclaredVariableParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class ImportedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ImportedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcIdIDTerminalRuleCall_2_0 = (RuleCall)cProcIdAssignment_2.eContents().get(0);
		private final Assignment cVarNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarNamesIDTerminalRuleCall_3_0 = (RuleCall)cVarNamesAssignment_3.eContents().get(0);
		
		//ImportedVariable:
		//	"from" "proc" procId=ID varNames+=ID*;
		@Override public ParserRule getRule() { return rule; }
		
		//"from" "proc" procId=ID varNames+=ID*
		public Group getGroup() { return cGroup; }
		
		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//"proc"
		public Keyword getProcKeyword_1() { return cProcKeyword_1; }
		
		//procId=ID
		public Assignment getProcIdAssignment_2() { return cProcIdAssignment_2; }
		
		//ID
		public RuleCall getProcIdIDTerminalRuleCall_2_0() { return cProcIdIDTerminalRuleCall_2_0; }
		
		//varNames+=ID*
		public Assignment getVarNamesAssignment_3() { return cVarNamesAssignment_3; }
		
		//ID
		public RuleCall getVarNamesIDTerminalRuleCall_3_0() { return cVarNamesIDTerminalRuleCall_3_0; }
	}
	public class DeclaredVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DeclaredVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPhysicalVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cProgramVariableParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		
		//DeclaredVariable:
		//	(PhysicalVariable | ProgramVariable) visibility=Visibility;
		@Override public ParserRule getRule() { return rule; }
		
		//(PhysicalVariable | ProgramVariable) visibility=Visibility
		public Group getGroup() { return cGroup; }
		
		//(PhysicalVariable | ProgramVariable)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PhysicalVariable
		public RuleCall getPhysicalVariableParserRuleCall_0_0() { return cPhysicalVariableParserRuleCall_0_0; }
		
		//ProgramVariable
		public RuleCall getProgramVariableParserRuleCall_0_1() { return cProgramVariableParserRuleCall_0_1; }
		
		//visibility=Visibility
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityParserRuleCall_1_0() { return cVisibilityVisibilityParserRuleCall_1_0; }
	}
	public class PhysicalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.PhysicalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIntegerTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortsRegisterPortParserRuleCall_4_0 = (RuleCall)cPortsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPortsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPortsRegisterPortParserRuleCall_5_1_0 = (RuleCall)cPortsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PhysicalVariable:
		//	type=IntegerType name=ID "=" "{" ports+=RegisterPort ("," ports+=RegisterPort)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//type=IntegerType name=ID "=" "{" ports+=RegisterPort ("," ports+=RegisterPort)* "}"
		public Group getGroup() { return cGroup; }
		
		//type=IntegerType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//IntegerType
		public RuleCall getTypeIntegerTypeParserRuleCall_0_0() { return cTypeIntegerTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ports+=RegisterPort
		public Assignment getPortsAssignment_4() { return cPortsAssignment_4; }
		
		//RegisterPort
		public RuleCall getPortsRegisterPortParserRuleCall_4_0() { return cPortsRegisterPortParserRuleCall_4_0; }
		
		//("," ports+=RegisterPort)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//ports+=RegisterPort
		public Assignment getPortsAssignment_5_1() { return cPortsAssignment_5_1; }
		
		//RegisterPort
		public RuleCall getPortsRegisterPortParserRuleCall_5_1_0() { return cPortsRegisterPortParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RegisterPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RegisterPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegNameIDTerminalRuleCall_0_0 = (RuleCall)cRegNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortIntegerParserRuleCall_2_0 = (RuleCall)cPortAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RegisterPort:
		//	regName=ID "[" port=Integer "]";
		@Override public ParserRule getRule() { return rule; }
		
		//regName=ID "[" port=Integer "]"
		public Group getGroup() { return cGroup; }
		
		//regName=ID
		public Assignment getRegNameAssignment_0() { return cRegNameAssignment_0; }
		
		//ID
		public RuleCall getRegNameIDTerminalRuleCall_0_0() { return cRegNameIDTerminalRuleCall_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//port=Integer
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }
		
		//Integer
		public RuleCall getPortIntegerParserRuleCall_2_0() { return cPortIntegerParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ProgramVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ProgramVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeReflexTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProgramVariable:
		//	type=ReflexType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ReflexType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ReflexType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ReflexType
		public RuleCall getTypeReflexTypeParserRuleCall_0_0() { return cTypeReflexTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLOCALAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cLOCALLocalKeyword_0_0 = (Keyword)cLOCALAssignment_0.eContents().get(0);
		private final Assignment cGLOBALAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cGLOBALGlobalKeyword_1_0 = (Keyword)cGLOBALAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSHAREDAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cSHAREDSharedKeyword_2_0_0 = (Keyword)cSHAREDAssignment_2_0.eContents().get(0);
		private final Assignment cSharingProcsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSharingProcsIDTerminalRuleCall_2_1_0 = (RuleCall)cSharingProcsAssignment_2_1.eContents().get(0);
		
		//Visibility:
		//	LOCAL="local" | GLOBAL="global" | SHARED="shared" sharingProcs+=ID*;
		@Override public ParserRule getRule() { return rule; }
		
		//LOCAL="local" | GLOBAL="global" | SHARED="shared" sharingProcs+=ID*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOCAL="local"
		public Assignment getLOCALAssignment_0() { return cLOCALAssignment_0; }
		
		//"local"
		public Keyword getLOCALLocalKeyword_0_0() { return cLOCALLocalKeyword_0_0; }
		
		//GLOBAL="global"
		public Assignment getGLOBALAssignment_1() { return cGLOBALAssignment_1; }
		
		//"global"
		public Keyword getGLOBALGlobalKeyword_1_0() { return cGLOBALGlobalKeyword_1_0; }
		
		//SHARED="shared" sharingProcs+=ID*
		public Group getGroup_2() { return cGroup_2; }
		
		//SHARED="shared"
		public Assignment getSHAREDAssignment_2_0() { return cSHAREDAssignment_2_0; }
		
		//"shared"
		public Keyword getSHAREDSharedKeyword_2_0_0() { return cSHAREDSharedKeyword_2_0_0; }
		
		//sharingProcs+=ID*
		public Assignment getSharingProcsAssignment_2_1() { return cSharingProcsAssignment_2_1; }
		
		//ID
		public RuleCall getSharingProcsIDTerminalRuleCall_2_1_0() { return cSharingProcsIDTerminalRuleCall_2_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateFunctionStateFunctionParserRuleCall_3_0 = (RuleCall)cStateFunctionAssignment_3.eContents().get(0);
		private final Assignment cTimeoutFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeoutFunctionTimeoutFunctionParserRuleCall_4_0 = (RuleCall)cTimeoutFunctionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//	"state" name=ID "{"
		//	stateFunction?=StateFunction?
		//	timeoutFunction?=TimeoutFunction?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"state" name=ID "{" stateFunction?=StateFunction? timeoutFunction?=TimeoutFunction? "}"
		public Group getGroup() { return cGroup; }
		
		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//stateFunction?=StateFunction?
		public Assignment getStateFunctionAssignment_3() { return cStateFunctionAssignment_3; }
		
		//StateFunction
		public RuleCall getStateFunctionStateFunctionParserRuleCall_3_0() { return cStateFunctionStateFunctionParserRuleCall_3_0; }
		
		//timeoutFunction?=TimeoutFunction?
		public Assignment getTimeoutFunctionAssignment_4() { return cTimeoutFunctionAssignment_4; }
		
		//TimeoutFunction
		public RuleCall getTimeoutFunctionTimeoutFunctionParserRuleCall_4_0() { return cTimeoutFunctionTimeoutFunctionParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.StateFunction");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyBodyParserRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//StateFunction:
		//	body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//body=Body
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_0() { return cBodyBodyParserRuleCall_0; }
	}
	public class TimeoutFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.TimeoutFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeTimeParserRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//TimeoutFunction:
		//	"timeout" time=Time body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//"timeout" time=Time body=Body
		public Group getGroup() { return cGroup; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//time=Time
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_1_0() { return cTimeTimeParserRuleCall_1_0; }
		
		//body=Body
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_2_0() { return cBodyBodyParserRuleCall_2_0; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubBodyParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cAssignStatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfElseStatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSwitchStatParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStartProcStatParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStopProcStatParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cErrorStatParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cBodyAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cLoopStatParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cBodyAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final RuleCall cRestartStatParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cSetStateStatParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Body:
		//	{Body} ";" | "{" sub+=Body* "}" | AssignStat | IfElseStat | SwitchStat | StartProcStat | StopProcStat | ErrorStat |
		//	{Body} LoopStat | {Body} RestartStat | SetStateStat;
		@Override public ParserRule getRule() { return rule; }
		
		//{Body} ";" | "{" sub+=Body* "}" | AssignStat | IfElseStat | SwitchStat | StartProcStat | StopProcStat | ErrorStat |
		//{Body} LoopStat | {Body} RestartStat | SetStateStat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Body} ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Body}
		public Action getBodyAction_0_0() { return cBodyAction_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//"{" sub+=Body* "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//sub+=Body*
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }
		
		//Body
		public RuleCall getSubBodyParserRuleCall_1_1_0() { return cSubBodyParserRuleCall_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//AssignStat
		public RuleCall getAssignStatParserRuleCall_2() { return cAssignStatParserRuleCall_2; }
		
		//IfElseStat
		public RuleCall getIfElseStatParserRuleCall_3() { return cIfElseStatParserRuleCall_3; }
		
		//SwitchStat
		public RuleCall getSwitchStatParserRuleCall_4() { return cSwitchStatParserRuleCall_4; }
		
		//StartProcStat
		public RuleCall getStartProcStatParserRuleCall_5() { return cStartProcStatParserRuleCall_5; }
		
		//StopProcStat
		public RuleCall getStopProcStatParserRuleCall_6() { return cStopProcStatParserRuleCall_6; }
		
		//ErrorStat
		public RuleCall getErrorStatParserRuleCall_7() { return cErrorStatParserRuleCall_7; }
		
		//{Body} LoopStat
		public Group getGroup_8() { return cGroup_8; }
		
		//{Body}
		public Action getBodyAction_8_0() { return cBodyAction_8_0; }
		
		//LoopStat
		public RuleCall getLoopStatParserRuleCall_8_1() { return cLoopStatParserRuleCall_8_1; }
		
		//{Body} RestartStat
		public Group getGroup_9() { return cGroup_9; }
		
		//{Body}
		public Action getBodyAction_9_0() { return cBodyAction_9_0; }
		
		//RestartStat
		public RuleCall getRestartStatParserRuleCall_9_1() { return cRestartStatParserRuleCall_9_1; }
		
		//SetStateStat
		public RuleCall getSetStateStatParserRuleCall_10() { return cSetStateStatParserRuleCall_10; }
	}
	public class AssignStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.AssignStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIdIDTerminalRuleCall_0_0 = (RuleCall)cVarIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssignStat:
		//	varId=ID "=" expr=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//varId=ID "=" expr=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//varId=ID
		public Assignment getVarIdAssignment_0() { return cVarIdAssignment_0; }
		
		//ID
		public RuleCall getVarIdIDTerminalRuleCall_0_0() { return cVarIdIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IfElseStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.IfElseStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBodyParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBodyParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfElseStat:
		//	"if" "(" cond=Condition ")"
		//	then=Body (=> "else" else=Body)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" cond=Condition ")" then=Body (=> "else" else=Body)?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Condition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=Body
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//Body
		public RuleCall getThenBodyParserRuleCall_4_0() { return cThenBodyParserRuleCall_4_0; }
		
		//(=> "else" else=Body)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=Body
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Body
		public RuleCall getElseBodyParserRuleCall_5_1_0() { return cElseBodyParserRuleCall_5_1_0; }
	}
	public class SwitchStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SwitchStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsCaseStatParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchStat:
		//	"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//options+=CaseStat*
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }
		
		//CaseStat
		public RuleCall getOptionsCaseStatParserRuleCall_5_0() { return cOptionsCaseStatParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CaseStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CaseStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionIntegerParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBreakKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		////TODO: add flag for break statement absence
		//CaseStat:
		//	"case" option=Integer ":" body=Body ("break" ";");
		@Override public ParserRule getRule() { return rule; }
		
		//"case" option=Integer ":" body=Body ("break" ";")
		public Group getGroup() { return cGroup; }
		
		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//option=Integer
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//Integer
		public RuleCall getOptionIntegerParserRuleCall_1_0() { return cOptionIntegerParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//body=Body
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_3_0() { return cBodyBodyParserRuleCall_3_0; }
		
		//("break" ";")
		public Group getGroup_4() { return cGroup_4; }
		
		//"break"
		public Keyword getBreakKeyword_4_0() { return cBreakKeyword_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class StartProcStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.StartProcStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcIdIDTerminalRuleCall_1_0 = (RuleCall)cProcIdAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StartProcStat:
		//	"start" procId=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"start" procId=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//procId=ID
		public Assignment getProcIdAssignment_1() { return cProcIdAssignment_1; }
		
		//ID
		public RuleCall getProcIdIDTerminalRuleCall_1_0() { return cProcIdIDTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StopProcStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.StopProcStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopProcStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcIdIDTerminalRuleCall_2_0 = (RuleCall)cProcIdAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StopProcStat:
		//	{StopProcStat} "stop" procId?=ID? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{StopProcStat} "stop" procId?=ID? ";"
		public Group getGroup() { return cGroup; }
		
		//{StopProcStat}
		public Action getStopProcStatAction_0() { return cStopProcStatAction_0; }
		
		//"stop"
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }
		
		//procId?=ID?
		public Assignment getProcIdAssignment_2() { return cProcIdAssignment_2; }
		
		//ID
		public RuleCall getProcIdIDTerminalRuleCall_2_0() { return cProcIdIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ErrorStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ErrorStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cErrorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcIdIDTerminalRuleCall_2_0 = (RuleCall)cProcIdAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ErrorStat:
		//	{ErrorStat} "error" procId?=ID? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorStat} "error" procId?=ID? ";"
		public Group getGroup() { return cGroup; }
		
		//{ErrorStat}
		public Action getErrorStatAction_0() { return cErrorStatAction_0; }
		
		//"error"
		public Keyword getErrorKeyword_1() { return cErrorKeyword_1; }
		
		//procId?=ID?
		public Assignment getProcIdAssignment_2() { return cProcIdAssignment_2; }
		
		//ID
		public RuleCall getProcIdIDTerminalRuleCall_2_0() { return cProcIdIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LoopStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LoopStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LoopStat:
		//	"loop" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"loop" ";"
		public Group getGroup() { return cGroup; }
		
		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class RestartStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RestartStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RestartStat:
		//	"restart" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"restart" ";"
		public Group getGroup() { return cGroup; }
		
		//"restart"
		public Keyword getRestartKeyword_0() { return cRestartKeyword_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ResetStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ResetStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTimeoutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResetStat:
		//	"reset" "timeout" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"reset" "timeout" ";"
		public Group getGroup() { return cGroup; }
		
		//"reset"
		public Keyword getResetKeyword_0() { return cResetKeyword_0; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_1() { return cTimeoutKeyword_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SetStateStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SetStateStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetStateStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cStateKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cStateIdAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cStateIdIDTerminalRuleCall_2_0_1_0 = (RuleCall)cStateIdAssignment_2_0_1.eContents().get(0);
		private final Keyword cNextKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////TODO: add flag to identify if next
		//SetStateStat:
		//	{SetStateStat} "set" ("state" stateId=ID | "next") ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{SetStateStat} "set" ("state" stateId=ID | "next") ";"
		public Group getGroup() { return cGroup; }
		
		//{SetStateStat}
		public Action getSetStateStatAction_0() { return cSetStateStatAction_0; }
		
		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//("state" stateId=ID | "next")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"state" stateId=ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"state"
		public Keyword getStateKeyword_2_0_0() { return cStateKeyword_2_0_0; }
		
		//stateId=ID
		public Assignment getStateIdAssignment_2_0_1() { return cStateIdAssignment_2_0_1; }
		
		//ID
		public RuleCall getStateIdIDTerminalRuleCall_2_0_1_0() { return cStateIdIDTerminalRuleCall_2_0_1_0; }
		
		//"next"
		public Keyword getNextKeyword_2_1() { return cNextKeyword_2_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeCTypeParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypesCTypeParserRuleCall_3_0 = (RuleCall)cArgTypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgTypesCTypeParserRuleCall_4_1_0 = (RuleCall)cArgTypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Function:
		//	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";"
		public Group getGroup() { return cGroup; }
		
		//returnType=CType
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//CType
		public RuleCall getReturnTypeCTypeParserRuleCall_0_0() { return cReturnTypeCTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//argTypes+=CType
		public Assignment getArgTypesAssignment_3() { return cArgTypesAssignment_3; }
		
		//CType
		public RuleCall getArgTypesCTypeParserRuleCall_3_0() { return cArgTypesCTypeParserRuleCall_3_0; }
		
		//("," argTypes+=CType)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//argTypes+=CType
		public Assignment getArgTypesAssignment_4_1() { return cArgTypesAssignment_4_1; }
		
		//CType
		public RuleCall getArgTypesCTypeParserRuleCall_4_1_0() { return cArgTypesCTypeParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Register");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRegisterTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAddr1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAddr1IntegerParserRuleCall_2_0 = (RuleCall)cAddr1Assignment_2.eContents().get(0);
		private final Assignment cAddr2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddr2IntegerParserRuleCall_3_0 = (RuleCall)cAddr2Assignment_3.eContents().get(0);
		private final Assignment cRegSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegSizeREG_SIZETerminalRuleCall_4_0 = (RuleCall)cRegSizeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Register:
		//	type=RegisterType name=ID addr1=Integer addr2=Integer regSize=REG_SIZE ";";
		@Override public ParserRule getRule() { return rule; }
		
		//type=RegisterType name=ID addr1=Integer addr2=Integer regSize=REG_SIZE ";"
		public Group getGroup() { return cGroup; }
		
		//type=RegisterType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//RegisterType
		public RuleCall getTypeRegisterTypeEnumRuleCall_0_0() { return cTypeRegisterTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//addr1=Integer
		public Assignment getAddr1Assignment_2() { return cAddr1Assignment_2; }
		
		//Integer
		public RuleCall getAddr1IntegerParserRuleCall_2_0() { return cAddr1IntegerParserRuleCall_2_0; }
		
		//addr2=Integer
		public Assignment getAddr2Assignment_3() { return cAddr2Assignment_3; }
		
		//Integer
		public RuleCall getAddr2IntegerParserRuleCall_3_0() { return cAddr2IntegerParserRuleCall_3_0; }
		
		//regSize=REG_SIZE
		public Assignment getRegSizeAssignment_4() { return cRegSizeAssignment_4; }
		
		//REG_SIZE
		public RuleCall getRegSizeREG_SIZETerminalRuleCall_4_0() { return cRegSizeREG_SIZETerminalRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstIdIDTerminalRuleCall_1_0 = (RuleCall)cConstIdAssignment_1.eContents().get(0);
		private final Assignment cConstValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstValueExpressionParserRuleCall_2_0 = (RuleCall)cConstValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Const:
		//	"const" constId=ID constValue=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"const" constId=ID constValue=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//constId=ID
		public Assignment getConstIdAssignment_1() { return cConstIdAssignment_1; }
		
		//ID
		public RuleCall getConstIdIDTerminalRuleCall_1_0() { return cConstIdIDTerminalRuleCall_1_0; }
		
		//constValue=Expression
		public Assignment getConstValueAssignment_2() { return cConstValueAssignment_2; }
		
		//Expression
		public RuleCall getConstValueExpressionParserRuleCall_2_0() { return cConstValueExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_1_0 = (RuleCall)cEnumMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEnumMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_2_1_0 = (RuleCall)cEnumMembersAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Enum:
		//	"enum" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* ";"
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_1() { return cEnumMembersAssignment_1; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_1_0() { return cEnumMembersEnumMemberParserRuleCall_1_0; }
		
		//(',' enumMembers+=EnumMember)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_2_1() { return cEnumMembersAssignment_2_1; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_2_1_0() { return cEnumMembersEnumMemberParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//EnumMember:
		//	name=ID "=" value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" value=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO
		//Expression:
		//	Integer | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	Integer | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class CTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVOID_C_TYPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cFLOAT_C_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cDOUBLE_C_TYPETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cSignSpecAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignSpecCTypeSignSpecEnumRuleCall_3_1_0 = (RuleCall)cSignSpecAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final RuleCall cSHORT_C_TYPETerminalRuleCall_3_2_0 = (RuleCall)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cINT_C_TYPETerminalRuleCall_3_2_1 = (RuleCall)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cLONG_C_TYPETerminalRuleCall_3_2_2 = (RuleCall)cAlternatives_3_2.eContents().get(2);
		
		//CType:
		//	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
		//	INT_C_TYPE | LONG_C_TYPE);
		@Override public ParserRule getRule() { return rule; }
		
		//{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
		//INT_C_TYPE | LONG_C_TYPE)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CType} VOID_C_TYPE
		public Group getGroup_0() { return cGroup_0; }
		
		//{CType}
		public Action getCTypeAction_0_0() { return cCTypeAction_0_0; }
		
		//VOID_C_TYPE
		public RuleCall getVOID_C_TYPETerminalRuleCall_0_1() { return cVOID_C_TYPETerminalRuleCall_0_1; }
		
		//{CType} FLOAT_C_TYPE
		public Group getGroup_1() { return cGroup_1; }
		
		//{CType}
		public Action getCTypeAction_1_0() { return cCTypeAction_1_0; }
		
		//FLOAT_C_TYPE
		public RuleCall getFLOAT_C_TYPETerminalRuleCall_1_1() { return cFLOAT_C_TYPETerminalRuleCall_1_1; }
		
		//{CType} DOUBLE_C_TYPE
		public Group getGroup_2() { return cGroup_2; }
		
		//{CType}
		public Action getCTypeAction_2_0() { return cCTypeAction_2_0; }
		
		//DOUBLE_C_TYPE
		public RuleCall getDOUBLE_C_TYPETerminalRuleCall_2_1() { return cDOUBLE_C_TYPETerminalRuleCall_2_1; }
		
		//{CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE)
		public Group getGroup_3() { return cGroup_3; }
		
		//{CType}
		public Action getCTypeAction_3_0() { return cCTypeAction_3_0; }
		
		//signSpec?=CTypeSignSpec?
		public Assignment getSignSpecAssignment_3_1() { return cSignSpecAssignment_3_1; }
		
		//CTypeSignSpec
		public RuleCall getSignSpecCTypeSignSpecEnumRuleCall_3_1_0() { return cSignSpecCTypeSignSpecEnumRuleCall_3_1_0; }
		
		//(SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//SHORT_C_TYPE
		public RuleCall getSHORT_C_TYPETerminalRuleCall_3_2_0() { return cSHORT_C_TYPETerminalRuleCall_3_2_0; }
		
		//INT_C_TYPE
		public RuleCall getINT_C_TYPETerminalRuleCall_3_2_1() { return cINT_C_TYPETerminalRuleCall_3_2_1; }
		
		//LONG_C_TYPE
		public RuleCall getLONG_C_TYPETerminalRuleCall_3_2_2() { return cLONG_C_TYPETerminalRuleCall_3_2_2; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.IntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOL_TYPETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINT_C_TYPETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSHORT_C_TYPETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLONG_C_TYPETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IntegerType:
		//	BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL_TYPE
		public RuleCall getBOOL_TYPETerminalRuleCall_0() { return cBOOL_TYPETerminalRuleCall_0; }
		
		//INT_C_TYPE
		public RuleCall getINT_C_TYPETerminalRuleCall_1() { return cINT_C_TYPETerminalRuleCall_1; }
		
		//SHORT_C_TYPE
		public RuleCall getSHORT_C_TYPETerminalRuleCall_2() { return cSHORT_C_TYPETerminalRuleCall_2; }
		
		//LONG_C_TYPE
		public RuleCall getLONG_C_TYPETerminalRuleCall_3() { return cLONG_C_TYPETerminalRuleCall_3; }
	}
	public class ReflexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ReflexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReflexTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBOOL_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ReflexType:
		//	CType | {ReflexType} BOOL_TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//CType | {ReflexType} BOOL_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CType
		public RuleCall getCTypeParserRuleCall_0() { return cCTypeParserRuleCall_0; }
		
		//{ReflexType} BOOL_TYPE
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReflexType}
		public Action getReflexTypeAction_1_0() { return cReflexTypeAction_1_0; }
		
		//BOOL_TYPE
		public RuleCall getBOOL_TYPETerminalRuleCall_1_1() { return cBOOL_TYPETerminalRuleCall_1_1; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cValueAlternatives_0_0 = (Alternatives)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueDECIMALTerminalRuleCall_0_0_0 = (RuleCall)cValueAlternatives_0_0.eContents().get(0);
		private final RuleCall cValueOCTALTerminalRuleCall_0_0_1 = (RuleCall)cValueAlternatives_0_0.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_0_0_2 = (RuleCall)cValueAlternatives_0_0.eContents().get(2);
		private final Assignment cQualfierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cQualfierAlternatives_1_0 = (Alternatives)cQualfierAssignment_1.eContents().get(0);
		private final RuleCall cQualfierLONGTerminalRuleCall_1_0_0 = (RuleCall)cQualfierAlternatives_1_0.eContents().get(0);
		private final RuleCall cQualfierUNSIGNEDTerminalRuleCall_1_0_1 = (RuleCall)cQualfierAlternatives_1_0.eContents().get(1);
		
		//// LITERALS
		//Integer:
		//	value=(DECIMAL | OCTAL | HEX) qualfier?=(LONG | UNSIGNED)?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=(DECIMAL | OCTAL | HEX) qualfier?=(LONG | UNSIGNED)?
		public Group getGroup() { return cGroup; }
		
		//value=(DECIMAL | OCTAL | HEX)
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//(DECIMAL | OCTAL | HEX)
		public Alternatives getValueAlternatives_0_0() { return cValueAlternatives_0_0; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0_0_0() { return cValueDECIMALTerminalRuleCall_0_0_0; }
		
		//OCTAL
		public RuleCall getValueOCTALTerminalRuleCall_0_0_1() { return cValueOCTALTerminalRuleCall_0_0_1; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0_0_2() { return cValueHEXTerminalRuleCall_0_0_2; }
		
		//qualfier?=(LONG | UNSIGNED)?
		public Assignment getQualfierAssignment_1() { return cQualfierAssignment_1; }
		
		//(LONG | UNSIGNED)
		public Alternatives getQualfierAlternatives_1_0() { return cQualfierAlternatives_1_0; }
		
		//LONG
		public RuleCall getQualfierLONGTerminalRuleCall_1_0_0() { return cQualfierLONGTerminalRuleCall_1_0_0; }
		
		//UNSIGNED
		public RuleCall getQualfierUNSIGNEDTerminalRuleCall_1_0_1() { return cQualfierUNSIGNEDTerminalRuleCall_1_0_1; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDAYTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cDaysAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDaysDECIMALTerminalRuleCall_1_1_0 = (RuleCall)cDaysAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cHOURTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cHoursAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cHoursDECIMALTerminalRuleCall_2_1_0 = (RuleCall)cHoursAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cMINUTETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cMinutesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinutesDECIMALTerminalRuleCall_3_1_0 = (RuleCall)cMinutesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cSECONDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cSecondsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSecondsDECIMALTerminalRuleCall_4_1_0 = (RuleCall)cSecondsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cMILISECONDTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cMilisAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMilisDECIMALTerminalRuleCall_5_1_0 = (RuleCall)cMilisAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cMICROSECONDTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cMicrosAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMicrosDECIMALTerminalRuleCall_6_1_0 = (RuleCall)cMicrosAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cNANOSECONDTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cNanosAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNanosDECIMALTerminalRuleCall_7_1_0 = (RuleCall)cNanosAssignment_7_1.eContents().get(0);
		
		//// Time
		//Time:
		//	("0t" | "0T") (DAY days?=DECIMAL)? (HOUR hours?=DECIMAL)? (MINUTE minutes?=DECIMAL)? (SECOND seconds?=DECIMAL)?
		//	(MILISECOND milis?=DECIMAL)? (MICROSECOND micros?=DECIMAL)? (NANOSECOND nanos?=DECIMAL)?;
		@Override public ParserRule getRule() { return rule; }
		
		//("0t" | "0T") (DAY days?=DECIMAL)? (HOUR hours?=DECIMAL)? (MINUTE minutes?=DECIMAL)? (SECOND seconds?=DECIMAL)?
		//(MILISECOND milis?=DECIMAL)? (MICROSECOND micros?=DECIMAL)? (NANOSECOND nanos?=DECIMAL)?
		public Group getGroup() { return cGroup; }
		
		//("0t" | "0T")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"0t"
		public Keyword getTKeyword_0_0() { return cTKeyword_0_0; }
		
		//"0T"
		public Keyword getTKeyword_0_1() { return cTKeyword_0_1; }
		
		//(DAY days?=DECIMAL)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DAY
		public RuleCall getDAYTerminalRuleCall_1_0() { return cDAYTerminalRuleCall_1_0; }
		
		//days?=DECIMAL
		public Assignment getDaysAssignment_1_1() { return cDaysAssignment_1_1; }
		
		//DECIMAL
		public RuleCall getDaysDECIMALTerminalRuleCall_1_1_0() { return cDaysDECIMALTerminalRuleCall_1_1_0; }
		
		//(HOUR hours?=DECIMAL)?
		public Group getGroup_2() { return cGroup_2; }
		
		//HOUR
		public RuleCall getHOURTerminalRuleCall_2_0() { return cHOURTerminalRuleCall_2_0; }
		
		//hours?=DECIMAL
		public Assignment getHoursAssignment_2_1() { return cHoursAssignment_2_1; }
		
		//DECIMAL
		public RuleCall getHoursDECIMALTerminalRuleCall_2_1_0() { return cHoursDECIMALTerminalRuleCall_2_1_0; }
		
		//(MINUTE minutes?=DECIMAL)?
		public Group getGroup_3() { return cGroup_3; }
		
		//MINUTE
		public RuleCall getMINUTETerminalRuleCall_3_0() { return cMINUTETerminalRuleCall_3_0; }
		
		//minutes?=DECIMAL
		public Assignment getMinutesAssignment_3_1() { return cMinutesAssignment_3_1; }
		
		//DECIMAL
		public RuleCall getMinutesDECIMALTerminalRuleCall_3_1_0() { return cMinutesDECIMALTerminalRuleCall_3_1_0; }
		
		//(SECOND seconds?=DECIMAL)?
		public Group getGroup_4() { return cGroup_4; }
		
		//SECOND
		public RuleCall getSECONDTerminalRuleCall_4_0() { return cSECONDTerminalRuleCall_4_0; }
		
		//seconds?=DECIMAL
		public Assignment getSecondsAssignment_4_1() { return cSecondsAssignment_4_1; }
		
		//DECIMAL
		public RuleCall getSecondsDECIMALTerminalRuleCall_4_1_0() { return cSecondsDECIMALTerminalRuleCall_4_1_0; }
		
		//(MILISECOND milis?=DECIMAL)?
		public Group getGroup_5() { return cGroup_5; }
		
		//MILISECOND
		public RuleCall getMILISECONDTerminalRuleCall_5_0() { return cMILISECONDTerminalRuleCall_5_0; }
		
		//milis?=DECIMAL
		public Assignment getMilisAssignment_5_1() { return cMilisAssignment_5_1; }
		
		//DECIMAL
		public RuleCall getMilisDECIMALTerminalRuleCall_5_1_0() { return cMilisDECIMALTerminalRuleCall_5_1_0; }
		
		//(MICROSECOND micros?=DECIMAL)?
		public Group getGroup_6() { return cGroup_6; }
		
		//MICROSECOND
		public RuleCall getMICROSECONDTerminalRuleCall_6_0() { return cMICROSECONDTerminalRuleCall_6_0; }
		
		//micros?=DECIMAL
		public Assignment getMicrosAssignment_6_1() { return cMicrosAssignment_6_1; }
		
		//DECIMAL
		public RuleCall getMicrosDECIMALTerminalRuleCall_6_1_0() { return cMicrosDECIMALTerminalRuleCall_6_1_0; }
		
		//(NANOSECOND nanos?=DECIMAL)?
		public Group getGroup_7() { return cGroup_7; }
		
		//NANOSECOND
		public RuleCall getNANOSECONDTerminalRuleCall_7_0() { return cNANOSECONDTerminalRuleCall_7_0; }
		
		//nanos?=DECIMAL
		public Assignment getNanosAssignment_7_1() { return cNanosAssignment_7_1; }
		
		//DECIMAL
		public RuleCall getNanosDECIMALTerminalRuleCall_7_1_0() { return cNanosDECIMALTerminalRuleCall_7_1_0; }
	}
	
	public class RegisterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RegisterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTInputKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTOutputKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RegisterType:
		//	INPUT='input' | OUTPUT='output';
		public EnumRule getRule() { return rule; }
		
		//INPUT='input' | OUTPUT='output'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INPUT='input'
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }
		
		//'input'
		public Keyword getINPUTInputKeyword_0_0() { return cINPUTInputKeyword_0_0; }
		
		//OUTPUT='output'
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }
		
		//'output'
		public Keyword getOUTPUTOutputKeyword_1_0() { return cOUTPUTOutputKeyword_1_0; }
	}
	public class CTypeSignSpecElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CTypeSignSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIGNEDSignedKeyword_0_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNSIGNEDUnsignedKeyword_1_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CTypeSignSpec:
		//	SIGNED="signed" | UNSIGNED="unsigned";
		public EnumRule getRule() { return rule; }
		
		//SIGNED="signed" | UNSIGNED="unsigned"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIGNED="signed"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_0() { return cSIGNEDEnumLiteralDeclaration_0; }
		
		//"signed"
		public Keyword getSIGNEDSignedKeyword_0_0() { return cSIGNEDSignedKeyword_0_0; }
		
		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_1() { return cUNSIGNEDEnumLiteralDeclaration_1; }
		
		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_1_0() { return cUNSIGNEDUnsignedKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final ProcessElements pProcess;
	private final VariableElements pVariable;
	private final ImportedVariableElements pImportedVariable;
	private final DeclaredVariableElements pDeclaredVariable;
	private final PhysicalVariableElements pPhysicalVariable;
	private final RegisterPortElements pRegisterPort;
	private final ProgramVariableElements pProgramVariable;
	private final VisibilityElements pVisibility;
	private final StateElements pState;
	private final StateFunctionElements pStateFunction;
	private final TimeoutFunctionElements pTimeoutFunction;
	private final BodyElements pBody;
	private final AssignStatElements pAssignStat;
	private final IfElseStatElements pIfElseStat;
	private final SwitchStatElements pSwitchStat;
	private final CaseStatElements pCaseStat;
	private final StartProcStatElements pStartProcStat;
	private final StopProcStatElements pStopProcStat;
	private final ErrorStatElements pErrorStat;
	private final LoopStatElements pLoopStat;
	private final RestartStatElements pRestartStat;
	private final ResetStatElements pResetStat;
	private final SetStateStatElements pSetStateStat;
	private final FunctionElements pFunction;
	private final RegisterTypeElements eRegisterType;
	private final RegisterElements pRegister;
	private final ConstElements pConst;
	private final EnumElements pEnum;
	private final EnumMemberElements pEnumMember;
	private final ExpressionElements pExpression;
	private final ConditionElements pCondition;
	private final CTypeElements pCType;
	private final CTypeSignSpecElements eCTypeSignSpec;
	private final IntegerTypeElements pIntegerType;
	private final ReflexTypeElements pReflexType;
	private final TerminalRule tVOID_C_TYPE;
	private final TerminalRule tFLOAT_C_TYPE;
	private final TerminalRule tDOUBLE_C_TYPE;
	private final TerminalRule tSHORT_C_TYPE;
	private final TerminalRule tINT_C_TYPE;
	private final TerminalRule tLONG_C_TYPE;
	private final TerminalRule tBOOL_TYPE;
	private final TerminalRule tTACT;
	private final IntegerElements pInteger;
	private final TerminalRule tREG_SIZE;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tOCTAL;
	private final TerminalRule tHEX;
	private final TimeElements pTime;
	private final TerminalRule tLONG;
	private final TerminalRule tUNSIGNED;
	private final TerminalRule tDAY;
	private final TerminalRule tHOUR;
	private final TerminalRule tMINUTE;
	private final TerminalRule tSECOND;
	private final TerminalRule tMILISECOND;
	private final TerminalRule tMICROSECOND;
	private final TerminalRule tNANOSECOND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReflexGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pProcess = new ProcessElements();
		this.pVariable = new VariableElements();
		this.pImportedVariable = new ImportedVariableElements();
		this.pDeclaredVariable = new DeclaredVariableElements();
		this.pPhysicalVariable = new PhysicalVariableElements();
		this.pRegisterPort = new RegisterPortElements();
		this.pProgramVariable = new ProgramVariableElements();
		this.pVisibility = new VisibilityElements();
		this.pState = new StateElements();
		this.pStateFunction = new StateFunctionElements();
		this.pTimeoutFunction = new TimeoutFunctionElements();
		this.pBody = new BodyElements();
		this.pAssignStat = new AssignStatElements();
		this.pIfElseStat = new IfElseStatElements();
		this.pSwitchStat = new SwitchStatElements();
		this.pCaseStat = new CaseStatElements();
		this.pStartProcStat = new StartProcStatElements();
		this.pStopProcStat = new StopProcStatElements();
		this.pErrorStat = new ErrorStatElements();
		this.pLoopStat = new LoopStatElements();
		this.pRestartStat = new RestartStatElements();
		this.pResetStat = new ResetStatElements();
		this.pSetStateStat = new SetStateStatElements();
		this.pFunction = new FunctionElements();
		this.eRegisterType = new RegisterTypeElements();
		this.pRegister = new RegisterElements();
		this.pConst = new ConstElements();
		this.pEnum = new EnumElements();
		this.pEnumMember = new EnumMemberElements();
		this.pExpression = new ExpressionElements();
		this.pCondition = new ConditionElements();
		this.pCType = new CTypeElements();
		this.eCTypeSignSpec = new CTypeSignSpecElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pReflexType = new ReflexTypeElements();
		this.tVOID_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.VOID_C_TYPE");
		this.tFLOAT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.FLOAT_C_TYPE");
		this.tDOUBLE_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DOUBLE_C_TYPE");
		this.tSHORT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SHORT_C_TYPE");
		this.tINT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.INT_C_TYPE");
		this.tLONG_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LONG_C_TYPE");
		this.tBOOL_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BOOL_TYPE");
		this.tTACT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.TACT");
		this.pInteger = new IntegerElements();
		this.tREG_SIZE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.REG_SIZE");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DECIMAL");
		this.tOCTAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.OCTAL");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.HEX");
		this.pTime = new TimeElements();
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LONG");
		this.tUNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.UNSIGNED");
		this.tDAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DAY");
		this.tHOUR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.HOUR");
		this.tMINUTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.MINUTE");
		this.tSECOND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SECOND");
		this.tMILISECOND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.MILISECOND");
		this.tMICROSECOND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.MICROSECOND");
		this.tNANOSECOND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.NANOSECOND");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ru.iaie.reflex.Reflex".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"program" name=ID "{"
	//	ticks?=TACT? (consts+=Const | enums+=Enum | functions+=Function | registers+=Register | processes+=Process)*
	//	"}";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Process:
	//	"proc" name=ID "{"
	//	variable+=Variable*
	//	states+=State*
	//	"}";
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//// Variables
	//Variable:
	//	ImportedVariable | DeclaredVariable ";";
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//ImportedVariable:
	//	"from" "proc" procId=ID varNames+=ID*;
	public ImportedVariableElements getImportedVariableAccess() {
		return pImportedVariable;
	}
	
	public ParserRule getImportedVariableRule() {
		return getImportedVariableAccess().getRule();
	}
	
	//DeclaredVariable:
	//	(PhysicalVariable | ProgramVariable) visibility=Visibility;
	public DeclaredVariableElements getDeclaredVariableAccess() {
		return pDeclaredVariable;
	}
	
	public ParserRule getDeclaredVariableRule() {
		return getDeclaredVariableAccess().getRule();
	}
	
	//PhysicalVariable:
	//	type=IntegerType name=ID "=" "{" ports+=RegisterPort ("," ports+=RegisterPort)* "}";
	public PhysicalVariableElements getPhysicalVariableAccess() {
		return pPhysicalVariable;
	}
	
	public ParserRule getPhysicalVariableRule() {
		return getPhysicalVariableAccess().getRule();
	}
	
	//RegisterPort:
	//	regName=ID "[" port=Integer "]";
	public RegisterPortElements getRegisterPortAccess() {
		return pRegisterPort;
	}
	
	public ParserRule getRegisterPortRule() {
		return getRegisterPortAccess().getRule();
	}
	
	//ProgramVariable:
	//	type=ReflexType name=ID;
	public ProgramVariableElements getProgramVariableAccess() {
		return pProgramVariable;
	}
	
	public ParserRule getProgramVariableRule() {
		return getProgramVariableAccess().getRule();
	}
	
	//Visibility:
	//	LOCAL="local" | GLOBAL="global" | SHARED="shared" sharingProcs+=ID*;
	public VisibilityElements getVisibilityAccess() {
		return pVisibility;
	}
	
	public ParserRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//State:
	//	"state" name=ID "{"
	//	stateFunction?=StateFunction?
	//	timeoutFunction?=TimeoutFunction?
	//	"}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//StateFunction:
	//	body=Body;
	public StateFunctionElements getStateFunctionAccess() {
		return pStateFunction;
	}
	
	public ParserRule getStateFunctionRule() {
		return getStateFunctionAccess().getRule();
	}
	
	//TimeoutFunction:
	//	"timeout" time=Time body=Body;
	public TimeoutFunctionElements getTimeoutFunctionAccess() {
		return pTimeoutFunction;
	}
	
	public ParserRule getTimeoutFunctionRule() {
		return getTimeoutFunctionAccess().getRule();
	}
	
	//Body:
	//	{Body} ";" | "{" sub+=Body* "}" | AssignStat | IfElseStat | SwitchStat | StartProcStat | StopProcStat | ErrorStat |
	//	{Body} LoopStat | {Body} RestartStat | SetStateStat;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//AssignStat:
	//	varId=ID "=" expr=Expression ";";
	public AssignStatElements getAssignStatAccess() {
		return pAssignStat;
	}
	
	public ParserRule getAssignStatRule() {
		return getAssignStatAccess().getRule();
	}
	
	//IfElseStat:
	//	"if" "(" cond=Condition ")"
	//	then=Body (=> "else" else=Body)?;
	public IfElseStatElements getIfElseStatAccess() {
		return pIfElseStat;
	}
	
	public ParserRule getIfElseStatRule() {
		return getIfElseStatAccess().getRule();
	}
	
	//SwitchStat:
	//	"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}";
	public SwitchStatElements getSwitchStatAccess() {
		return pSwitchStat;
	}
	
	public ParserRule getSwitchStatRule() {
		return getSwitchStatAccess().getRule();
	}
	
	////TODO: add flag for break statement absence
	//CaseStat:
	//	"case" option=Integer ":" body=Body ("break" ";");
	public CaseStatElements getCaseStatAccess() {
		return pCaseStat;
	}
	
	public ParserRule getCaseStatRule() {
		return getCaseStatAccess().getRule();
	}
	
	//StartProcStat:
	//	"start" procId=ID ";";
	public StartProcStatElements getStartProcStatAccess() {
		return pStartProcStat;
	}
	
	public ParserRule getStartProcStatRule() {
		return getStartProcStatAccess().getRule();
	}
	
	//StopProcStat:
	//	{StopProcStat} "stop" procId?=ID? ";";
	public StopProcStatElements getStopProcStatAccess() {
		return pStopProcStat;
	}
	
	public ParserRule getStopProcStatRule() {
		return getStopProcStatAccess().getRule();
	}
	
	//ErrorStat:
	//	{ErrorStat} "error" procId?=ID? ";";
	public ErrorStatElements getErrorStatAccess() {
		return pErrorStat;
	}
	
	public ParserRule getErrorStatRule() {
		return getErrorStatAccess().getRule();
	}
	
	//LoopStat:
	//	"loop" ";";
	public LoopStatElements getLoopStatAccess() {
		return pLoopStat;
	}
	
	public ParserRule getLoopStatRule() {
		return getLoopStatAccess().getRule();
	}
	
	//RestartStat:
	//	"restart" ";";
	public RestartStatElements getRestartStatAccess() {
		return pRestartStat;
	}
	
	public ParserRule getRestartStatRule() {
		return getRestartStatAccess().getRule();
	}
	
	//ResetStat:
	//	"reset" "timeout" ";";
	public ResetStatElements getResetStatAccess() {
		return pResetStat;
	}
	
	public ParserRule getResetStatRule() {
		return getResetStatAccess().getRule();
	}
	
	////TODO: add flag to identify if next
	//SetStateStat:
	//	{SetStateStat} "set" ("state" stateId=ID | "next") ";";
	public SetStateStatElements getSetStateStatAccess() {
		return pSetStateStat;
	}
	
	public ParserRule getSetStateStatRule() {
		return getSetStateStatAccess().getRule();
	}
	
	//Function:
	//	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//enum RegisterType:
	//	INPUT='input' | OUTPUT='output';
	public RegisterTypeElements getRegisterTypeAccess() {
		return eRegisterType;
	}
	
	public EnumRule getRegisterTypeRule() {
		return getRegisterTypeAccess().getRule();
	}
	
	//Register:
	//	type=RegisterType name=ID addr1=Integer addr2=Integer regSize=REG_SIZE ";";
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//Const:
	//	"const" constId=ID constValue=Expression ";";
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//Enum:
	//	"enum" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* ";";
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumMember:
	//	name=ID "=" value=Expression;
	public EnumMemberElements getEnumMemberAccess() {
		return pEnumMember;
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}
	
	//// TODO
	//Expression:
	//	Integer | ID;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Condition:
	//	Integer | ID;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//CType:
	//	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
	//	INT_C_TYPE | LONG_C_TYPE);
	public CTypeElements getCTypeAccess() {
		return pCType;
	}
	
	public ParserRule getCTypeRule() {
		return getCTypeAccess().getRule();
	}
	
	//enum CTypeSignSpec:
	//	SIGNED="signed" | UNSIGNED="unsigned";
	public CTypeSignSpecElements getCTypeSignSpecAccess() {
		return eCTypeSignSpec;
	}
	
	public EnumRule getCTypeSignSpecRule() {
		return getCTypeSignSpecAccess().getRule();
	}
	
	//IntegerType:
	//	BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//ReflexType:
	//	CType | {ReflexType} BOOL_TYPE;
	public ReflexTypeElements getReflexTypeAccess() {
		return pReflexType;
	}
	
	public ParserRule getReflexTypeRule() {
		return getReflexTypeAccess().getRule();
	}
	
	//terminal VOID_C_TYPE:
	//	"void";
	public TerminalRule getVOID_C_TYPERule() {
		return tVOID_C_TYPE;
	}
	
	//terminal FLOAT_C_TYPE:
	//	"float";
	public TerminalRule getFLOAT_C_TYPERule() {
		return tFLOAT_C_TYPE;
	}
	
	//terminal DOUBLE_C_TYPE:
	//	"double";
	public TerminalRule getDOUBLE_C_TYPERule() {
		return tDOUBLE_C_TYPE;
	}
	
	//terminal SHORT_C_TYPE:
	//	"short";
	public TerminalRule getSHORT_C_TYPERule() {
		return tSHORT_C_TYPE;
	}
	
	//terminal INT_C_TYPE:
	//	"int";
	public TerminalRule getINT_C_TYPERule() {
		return tINT_C_TYPE;
	}
	
	//terminal LONG_C_TYPE:
	//	"long";
	public TerminalRule getLONG_C_TYPERule() {
		return tLONG_C_TYPE;
	}
	
	//terminal BOOL_TYPE:
	//	"bool";
	public TerminalRule getBOOL_TYPERule() {
		return tBOOL_TYPE;
	}
	
	//terminal TACT:
	//	"tact";
	public TerminalRule getTACTRule() {
		return tTACT;
	}
	
	//// LITERALS
	//Integer:
	//	value=(DECIMAL | OCTAL | HEX) qualfier?=(LONG | UNSIGNED)?;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//terminal REG_SIZE returns ecore::EInt:
	//	"8" | "16";
	public TerminalRule getREG_SIZERule() {
		return tREG_SIZE;
	}
	
	//terminal DECIMAL:
	//	'1'..'9' '0'..'9'*;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal OCTAL:
	//	'0' '0'..'7'*;
	public TerminalRule getOCTALRule() {
		return tOCTAL;
	}
	
	//terminal HEX:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//// Time
	//Time:
	//	("0t" | "0T") (DAY days?=DECIMAL)? (HOUR hours?=DECIMAL)? (MINUTE minutes?=DECIMAL)? (SECOND seconds?=DECIMAL)?
	//	(MILISECOND milis?=DECIMAL)? (MICROSECOND micros?=DECIMAL)? (NANOSECOND nanos?=DECIMAL)?;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//terminal LONG:
	//	"L" | "l";
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal UNSIGNED:
	//	"U" | "u";
	public TerminalRule getUNSIGNEDRule() {
		return tUNSIGNED;
	}
	
	//terminal DAY:
	//	"D" | "d";
	public TerminalRule getDAYRule() {
		return tDAY;
	}
	
	//terminal HOUR:
	//	"H" | "h";
	public TerminalRule getHOURRule() {
		return tHOUR;
	}
	
	//terminal MINUTE:
	//	"M" | "m";
	public TerminalRule getMINUTERule() {
		return tMINUTE;
	}
	
	//terminal SECOND:
	//	"S" | "s";
	public TerminalRule getSECONDRule() {
		return tSECOND;
	}
	
	//terminal MILISECOND:
	//	"MS" | "ms";
	public TerminalRule getMILISECONDRule() {
		return tMILISECOND;
	}
	
	//terminal MICROSECOND:
	//	"US" | "us";
	public TerminalRule getMICROSECONDRule() {
		return tMICROSECOND;
	}
	
	//terminal NANOSECOND:
	//	"NS" | "ns";
	public TerminalRule getNANOSECONDRule() {
		return tNANOSECOND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
